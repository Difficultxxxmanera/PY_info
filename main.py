from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher, executor, types
from keyboards import start_menu
from dadata import Dadata
from bs4 import BeautifulSoup
from aiogram.dispatcher.filters import Text 

from config import BOT_TOKEN, token, secret
from config_chat import * 

import io, requests

bot = Bot(token=BOT_TOKEN) 
dp = Dispatcher(bot) 

@dp.message_handler(commands=['start']) 
async def send_welcom(message: types.Message): 
    await message.reply(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}, –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º –¥–ª—è Python —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', reply_markup=start_menu) 

@dp.message_handler(Text(equals='INFOüìï')) 
async def main(message: types.Message):  
    await message.reply(info) 

@dp.message_handler(Text(equals='–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π GPTü•á'))
async def GPT(message: types.Message): 
    await message.reply("https://t.me/GPT2_neuronbot") 

@dp.message_handler(lambda message: message.text == '–ö—É—Ä—Å—ã ITüéü') 
async def kyrsa(message: types.Message): 
    kyrs = InlineKeyboardMarkup(row_width=3) 
    btn = InlineKeyboardButton(text= 'GeekBrains', url='https://gb.ru')  
    btn2 = InlineKeyboardButton(text='–Ø–Ω–¥–µ–∫—Å –ü—Ä–∞–∫—Ç–∏–∫—É–º', callback_data='https://practicum.yandex.ru/catalog/start/') 
    btn3 = InlineKeyboardButton(text = 'SkillFactory', url='https://skillfactory.ru') 
    btn4 = InlineKeyboardButton(text='SkillBOX', url='https://skillbox.ru/code/') 
    kyrs.add(btn, btn2, btn3, btn4)
    await message.reply('–ö—É—Ä—Å—ã –ø–æ IT —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º', reply_markup=kyrs)

@dp.message_handler(lambda message: message.text == '–î–æ–ø —Ñ—É–Ω–∫—Ü–∏–∏üõ†')
async def dopfunc(message: types.Message): 
     buttons = types.ReplyKeyboardMarkup(resize_keyboard=True) 
     ph = types.KeyboardButton(text = 'Parser')  
     bask = types.KeyboardButton(text = '–ù–∞–∑–∞–¥ üîô') 
     phone_ = types.KeyboardButton(text = 'Phoneüìû')
     buttons.add(phone, bask, ph, phone_) 
     await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', reply_markup=buttons)

@dp.message_handler(Text(equals='Parser')) 
async def pars_mode(message: types.Message): 
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É') 

    @dp.message_handler() 
    async def mes(message: types.Message): 
        data = message.text
        response = requests.get(data) 
        if response.status_code == 200: 
            f = BeautifulSoup(response.text, 'html.parser')
            with io.open('prototip_html_resault.txt', 'w', encoding='utf-8') as S:
                S.write(str(f))
            
            await message.answer_document(open('prototip_html_resault.txt', 'r'))
        elif (response.status_code == 400): 
            await message.reply('–°–±–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (HTTPerror, URLerror)')

@dp.message_handler(Text(equals='Phoneüìû')) 
async def phone(message: types.Message): 
      await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞') 

      @dp.message_handler() 
      async def msg(message: types.Message): 
          phone_txt = int(message.text)
          dadata = Dadata(token, secret)
          result = dadata.clean("phone", phone_txt) 

          with io.open('phone_info.txt', 'w', encoding='utf-8') as f: 
              f.write(str(result))
              
          await message.reply_document(open('phone_info.txt', 'r'))
@dp.message_handler(Text(equals='–ù–∞–∑–∞–¥ üîô'))  
async def main_t(message: types.Message): 
     text = message.text 
     if text == '–ù–∞–∑–∞–¥ üîô': 
          await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—è—Ç–∏–µ", reply_markup=start_menu)

@dp.message_handler(lambda message: message.text == '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è Pythonüßß') 
async def main_c(message: types.Message): 
     btn___ = types.ReplyKeyboardMarkup(resize_keyboard=True) 
     peremenn = types.KeyboardButton(text = '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ') 
     sync = types.KeyboardButton(text = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è')
     func = types.KeyboardButton(text = '–§—É–Ω–∫—Ü–∏–∏')
     class_meth = types.KeyboardButton(text = '–ö–ª–∞—Å—Å—ã –∏ –º–µ—Ç–æ–¥—ã')
     lib = types.KeyboardButton(text = '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏')
     back = types.KeyboardButton(text = '–ù–∞–∑–∞–¥ üîô') 
     btn___.add(peremenn, func, back, lib, class_meth, sync)  
     await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—è—Ç–∏–µ", reply_markup=btn___) 


@dp.message_handler(Text(equals='–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ')) 
async def main_a(message: types.Message): 
    await message.reply(py_pereme)
    
@dp.message_handler(Text(equals='–§—É–Ω–∫—Ü–∏–∏')) 
async def func(message: types.Message): 
    await message.reply(funct) 

@dp.message_handler(Text(equals='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'))
async def senc(message: types.Message): 
    await message.reply(sync)

@dp.message_handler(Text(equals='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏'))
async def lib_(message: types.Message): 
    await message.reply(lib__)

@dp.message_handler(Text(equals='–ö–ª–∞—Å—Å—ã –∏ –º–µ—Ç–æ–¥—ã'))
async def lib3(message: types.Message): 
    await message.reply(objclasss)

@dp.message_handler(Text(equals='–ù–∞–∑–∞–¥ üîô'))  
async def main_t(message: types.Message): 
     text = message.text 
     if text == '–ù–∞–∑–∞–¥ üîô': 
          await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—è—Ç–∏–µ", reply_markup=start_menu)
          
if __name__ == '__main__': 
    executor.start_polling(dp, skip_updates=True)